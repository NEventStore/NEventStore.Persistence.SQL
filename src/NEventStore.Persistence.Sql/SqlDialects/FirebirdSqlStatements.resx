<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="InitializeStorage" xml:space="preserve">
    <value>CREATE TABLE Commits
	(
	   BucketId varchar(40) NOT NULL,
	   StreamId char(40) NOT NULL,
	   StreamIdOriginal varchar (1000) NOT NULL,
	   StreamRevision int NOT NULL CHECK (StreamRevision &gt; 0),
	   Items int NOT NULL CHECK (Items &gt; 0),
	   CommitId char(16) character set octets NOT NULL,
	   CommitSequence int NOT NULL CHECK (CommitSequence &gt; 0),
	   CommitStamp timestamp NOT NULL,
	   CheckpointNumber int PRIMARY KEY,
	   Dispatched char (1) DEFAULT '0' NOT NULL,
	   Headers blob,
	   Payload blob NOT NULL
	);__
CREATE GENERATOR gen_cp_CpNo;__
SET GENERATOR gen_cp_CpNo TO 0;__
CREATE TRIGGER TCheckPoint FOR Commits
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
if (NEW.CheckpointNumber is NULL) then NEW.CheckpointNumber = GEN_ID(gen_cp_CpNo, 1);
END;__
CREATE UNIQUE INDEX IX_Commits_CommitSequence ON Commits (BucketId, StreamId, CommitSequence);__
CREATE UNIQUE INDEX IX_Commits_CommitId ON Commits (BucketId, StreamId, CommitId);__
CREATE UNIQUE INDEX IX_Commits_Revisions ON Commits (BucketId, StreamId, StreamRevision, Items);__
CREATE INDEX IX_Commits_Dispatched ON Commits (Dispatched);__
CREATE INDEX IX_Commits_Stamp ON Commits (CommitStamp);__
CREATE TABLE Snapshots
(
       BucketId varchar(40) NOT NULL,
       StreamId char(40) NOT NULL,
       StreamRevision int NOT NULL CHECK (StreamRevision &gt; 0),
       Payload blob NOT NULL,
       CONSTRAINT PK_Snapshots PRIMARY KEY (BucketId, StreamId, StreamRevision)
);</value>
  </data>
  <data name="PersistCommits" xml:space="preserve">
    <value>INSERT
  INTO Commits
	 ( BucketId, StreamId, StreamIdOriginal, CommitId, CommitSequence, StreamRevision, Items, CommitStamp, Headers, Payload )
VALUES (@BucketId, @StreamId, @StreamIdOriginal, @CommitId, @CommitSequence, @StreamRevision, @Items, @CommitStamp, @Headers, @Payload)
RETURNING CheckpointNumber;</value>
  </data>
  <data name="GetCommitsFromInstant" xml:space="preserve">
    <value>SELECT FIRST @Limit SKIP @Skip BucketId, StreamId, StreamIdOriginal, StreamRevision, CommitId, CommitSequence, CommitStamp, CheckpointNumber, Headers, Payload
  FROM Commits
 WHERE BucketId = @BucketId AND CommitStamp &gt;= @CommitStamp
 ORDER BY CommitStamp, StreamId, CommitSequence;</value>
  </data>
  <data name="GetCommitsFromToInstant" xml:space="preserve">
    <value>SELECT FIRST @Limit SKIP @Skip BucketId, StreamId, StreamIdOriginal, StreamRevision, CommitId, CommitSequence, CommitStamp, CheckpointNumber, Headers, Payload
  FROM Commits
 WHERE BucketId = @BucketId
   AND CommitStamp &gt;= @CommitStampStart
   AND CommitStamp &lt; @CommitStampEnd
 ORDER BY CommitStamp, StreamId, CommitSequence;</value>
  </data>
  <data name="GetCommitsFromStartingRevision" xml:space="preserve">
    <value>SELECT FIRST @Limit BucketId, StreamId, StreamIdOriginal, StreamRevision, CommitId, CommitSequence, CommitStamp,  CheckpointNumber, Headers, Payload
  FROM Commits
 WHERE BucketId = @BucketId
   AND StreamId = @StreamId
   AND StreamRevision &gt;= @StreamRevision
   AND (StreamRevision - Items) &lt; @MaxStreamRevision
   AND CommitSequence &gt; @CommitSequence
 ORDER BY CommitSequence;</value>
  </data>
  <data name="GetSnapshot" xml:space="preserve">
    <value>SELECT FIRST 1 *
  FROM Snapshots
 WHERE BucketId = @BucketId
   AND StreamId = @StreamId
   AND StreamRevision &lt;= @StreamRevision
 ORDER BY StreamRevision DESC;</value>
  </data>
  <data name="GetStreamsRequiringSnapshots" xml:space="preserve">
    <value>SELECT FIRST @Limit C.BucketId, C.StreamId, C.StreamIdOriginal, MAX(C.StreamRevision) AS StreamRevision, MAX(COALESCE(S.StreamRevision, 0)) AS SnapshotRevision
  FROM Commits AS C
 LEFT OUTER JOIN Snapshots AS S
	ON C.BucketId = @BucketId
   AND C.StreamId = S.StreamId
   AND C.StreamRevision &gt;= S.StreamRevision
 GROUP BY C.StreamId, C.BucketId, C.StreamIdOriginal
HAVING MAX(C.StreamRevision) &gt;= MAX(COALESCE(S.StreamRevision, 0)) + @Threshold
 ORDER BY C.StreamId;</value>
  </data>
  <data name="GetUndispatchedCommits" xml:space="preserve">
    <value>SELECT FIRST @Limit SKIP @Skip BucketId, StreamId, StreamIdOriginal, StreamRevision, CommitId, CommitSequence, CommitStamp, CheckpointNumber, Headers, Payload
  FROM Commits
 WHERE Dispatched = 0
 ORDER BY CheckpointNumber;</value>
  </data>
  <data name="GetCommitsFromCheckpoint" xml:space="preserve">
    <value>SELECT FIRST @Limit SKIP @Skip BucketId, StreamId, StreamIdOriginal, StreamRevision, CommitId, CommitSequence, CommitStamp, CheckpointNumber, Headers, Payload
FROM Commits
WHERE  CheckpointNumber &gt; @CheckpointNumber
ORDER BY CheckpointNumber;</value>
  </data>
  <data name="AppendSnapshotToCommit" xml:space="preserve">
    <value>INSERT
INTO Snapshots
 ( BucketId, StreamId, StreamRevision, Payload )
SELECT @BucketId, @StreamId, @StreamRevision, @Payload FROM rdb$database
WHERE EXISTS ( SELECT * FROM Commits WHERE BucketId = @BucketId AND StreamId = @StreamId AND (StreamRevision - Items) &lt;= @StreamRevision )
AND NOT EXISTS ( SELECT * FROM Snapshots WHERE BucketId = @BucketId AND StreamId = @StreamId AND StreamRevision = @StreamRevision );</value>
  </data>
  <data name="GetCommitsFromBucketAndCheckpoint" xml:space="preserve">
    <value>SELECT FIRST @Limit SKIP @Skip BucketId, StreamId, StreamIdOriginal, StreamRevision, CommitId, CommitSequence, CommitStamp, CheckpointNumber, Headers, Payload
  FROM Commits
 WHERE BucketId = @BucketId 
   AND CheckpointNumber &gt; @CheckpointNumber
 ORDER BY CheckpointNumber;</value>
  </data>
</root>